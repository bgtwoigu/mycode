package com.itheima.mobilesafe;

import java.util.List;

import android.app.Activity;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.BaseAdapter;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.itheima.mobilesafe.db.dao.BlackNumberDao;
import com.itheima.mobilesafe.domain.BlackNumberInfo;

public class CallSmsSafeActivity extends Activity {
	private ListView lv_call_sms_safe;
	private BlackNumberDao dao;
	private List<BlackNumberInfo> infos;
	private LinearLayout ll_loading;
	private CallSmsSafeAdapter adapter;
	private boolean isloading = false;
	private int totalCount = 0;
	/**
	 * 加载数据的开始位置
	 */
	private int startIndex = 0;
	private Handler handler = new Handler() {
		public void handleMessage(android.os.Message msg) {
			ll_loading.setVisibility(View.INVISIBLE);
			if(adapter==null){
				adapter = new CallSmsSafeAdapter();
				lv_call_sms_safe.setAdapter(adapter);
			}else{
				adapter.notifyDataSetChanged();//通知数据适配器更新下界面。
			}
			isloading = false;
		};
	};

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_call_sms_safe);
		ll_loading = (LinearLayout) findViewById(R.id.ll_loading);
		lv_call_sms_safe = (ListView) findViewById(R.id.lv_call_sms_safe);
		dao = new BlackNumberDao(this);
		totalCount = dao.getTotalCount();
		lv_call_sms_safe.setOnScrollListener(new OnScrollListener() {
			// 滚动状态变化了。
			// 静止-->滚动
			// 滚动-->静止
			// 手指触摸滚动-->惯性滑动
			@Override
			public void onScrollStateChanged(AbsListView view, int scrollState) {
				switch (scrollState) {
				case OnScrollListener.SCROLL_STATE_IDLE:// 静止状态
					//判断界面是否已经滑动到了最后面。
					//获取最后一个可见条目的位置
					int position = lv_call_sms_safe.getLastVisiblePosition(); //19
					int total = infos.size(); //20
					if(isloading){
						Toast.makeText(getApplicationContext(),"正在加载数据，不要重复刷新。",0).show();
						return;
					}
					if(position>=(total-5)){
						
						//指定新的获取数据的开始位置
						startIndex+=20;
						if(startIndex>=totalCount){
							Toast.makeText(getApplicationContext(), "没有更多数据了，别再拖了", 0).show();
							return;
						}
						Toast.makeText(getApplicationContext(), "拖动到最下面了。加载更多数据", 0).show();
						fillData();
					}
					break;
				case OnScrollListener.SCROLL_STATE_FLING:// 惯性滑动
					
					break;
				case OnScrollListener.SCROLL_STATE_TOUCH_SCROLL://触摸滚动

					break;
				}

			}

			// 滚动的时候执行的方法
			@Override
			public void onScroll(AbsListView view, int firstVisibleItem,
					int visibleItemCount, int totalItemCount) {

			}
		});
		fillData();

	}

	private void fillData() {
		ll_loading.setVisibility(View.VISIBLE);
		isloading = true;
		new Thread() {
			public void run() {
				if(infos==null){
					infos = dao.findPart(startIndex);
				}else{//原来集合里面已经有数据了。
					infos.addAll(dao.findPart(startIndex));
				}
				// 发送一个消息 更新界面。
				handler.sendEmptyMessage(0);
			};
		}.start();
	}

	private class CallSmsSafeAdapter extends BaseAdapter {
		private static final String TAG = "CallSmsSafeAdapter";

		@Override
		public int getCount() {
			return infos.size();
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			// 为了减少view对象创建的个数 使用历史缓存的view对象 convertview
			View view;
			ViewHolder holder;
			if (convertView != null) {
				view = convertView;
				Log.i(TAG, "使用历史缓存的view对象" + position);
				holder = (ViewHolder) view.getTag();
			} else {
				Log.i(TAG, "创建新的view对象" + position);
				view = View.inflate(getApplicationContext(),
						R.layout.list_callsmssafe_item, null);
				// 寻找孩子的过程 是一个比较耗时 消耗资源的操作 进一步的优化。
				// 没有必要每一次都去查看每个孩子的特征 根据id得到孩子的引用。
				// 只需要在孩子出生的时候 ， 找到特征 ，把特征给存起来
				holder = new ViewHolder();// 买了一个记事本 记录孩子的信息。
				holder.tv_number = (TextView) view.findViewById(R.id.tv_number);
				holder.tv_mode = (TextView) view.findViewById(R.id.tv_mode);
				view.setTag(holder); // 把孩子的引用 记事本 放在口袋里
			}

			BlackNumberInfo info = infos.get(position);
			String mode = info.getMode();
			if ("1".equals(mode)) {
				holder.tv_mode.setText("电话拦截");
			} else if ("2".equals(mode)) {
				holder.tv_mode.setText("短信拦截");
			} else if ("3".equals(mode)) {
				holder.tv_mode.setText("电话+短信拦截");
			}
			holder.tv_number.setText(info.getNumber());
			return view;
		}

		@Override
		public Object getItem(int position) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public long getItemId(int position) {
			// TODO Auto-generated method stub
			return 0;
		}
	}

	class ViewHolder {
		TextView tv_number;
		TextView tv_mode;
	}

}
